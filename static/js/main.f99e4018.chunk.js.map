{"version":3,"sources":["api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["request","endpoint","id","fetch","then","response","json","result","data","TodoList","state","query","filter","isQueryInTodo","title","length","showTodos","serchElement","toLowerCase","trim","includes","handleChange","event","target","name","value","setState","filterTodos","todos","todo","completed","this","props","setSelectedUserId","shuffleTodos","className","placeholder","onChange","type","onClick","map","key","readOnly","checked","userId","React","Component","CurrentUser","currentUser","setCurrentUser","prevProps","a","allUsers","find","user","email","phone","clearUserInfo","App","selectedUserId","shuffledTodos","i","j","Math","floor","random","allTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f99e4018.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const ACTIVE = 'Active';\nexport const COMPLETED = 'Completed';\n\nexport const request = (endpoint, id) => fetch(`${BASE_URL}/${endpoint}/`)\n  .then(response => response.json()).then(result => result.data);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ACTIVE, COMPLETED } from '../../api';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    filter: 'All',\n  };\n\n  isQueryInTodo = (query, title) => {\n    if (!this.state.query.length && this.state.showTodos === 'All') {\n      return true;\n    }\n\n    if (title === null) {\n      return false;\n    }\n\n    const serchElement = query.toLowerCase().trim();\n\n    return (!!(title.toLowerCase().includes(serchElement)));\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      ...state,\n      [name]: value,\n    }));\n  }\n\n  filterTodos = (todos) => {\n    switch (this.state.filter) {\n      case ACTIVE:\n        return todos.filter(todo => !todo.completed);\n      case COMPLETED:\n        return todos.filter(todo => todo.completed);\n      default: return todos;\n    }\n  }\n\n  render() {\n    const { todos, setSelectedUserId, shuffleTodos } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <input\n            name=\"query\"\n            placeholder=\"todos filter\"\n            className=\"todoInput\"\n            value={this.state.query}\n            onChange={this.handleChange}\n          />\n          <select\n            name=\"filter\"\n            value={this.state.filter}\n            onChange={this.handleChange}\n            className=\"todoSelect\"\n          >\n            <option value=\"All\">All</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => shuffleTodos(todos)}\n          >\n            Randomize\n          </button>\n\n          <ul className=\"TodoList__list\">\n            {this.filterTodos(todos).map(todo => (\n              this.isQueryInTodo(this.state.query, todo.title) && (\n                <li\n                  key={todo.id}\n                  className={todo.completed\n                    ? 'TodoList__item TodoList__item--checked'\n                    : 'TodoList__item TodoList__item--unchecked'}\n                >\n                  <label>\n                    <input type=\"checkbox\" readOnly checked={todo.completed} />\n                    <p>{todo.title}</p>\n                  </label>\n                  <button\n                    className=\"\n                     TodoList__user-button\n                     TodoList__user-button--selected\n                     button\"\n                    type=\"button\"\n                    onClick={() => setSelectedUserId(+todo.userId)}\n                  >\n                    User&nbsp;\n                    {todo.userId}\n                  </button>\n                </li>\n              )\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  setSelectedUserId: PropTypes.func.isRequired,\n  shuffleTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { request } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = { currentUser: {} }\n\n  componentDidMount() {\n    this.setCurrentUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.setCurrentUser();\n    }\n  }\n\n  async setCurrentUser() {\n    const allUsers = await request('users/', this.props.userId);\n    const currentUser = allUsers.find(user => user.id === this.props.userId);\n\n    this.setState({ currentUser });\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.currentUser;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          className=\"TodoList__user-button button buttonLocation\"\n          onClick={() => {\n            this.props.clearUserInfo();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUserInfo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const allTodos = await request('todos');\n\n    this.setState({ todos: allTodos });\n  }\n\n  setSelectedUserId = (value) => {\n    this.setState({ selectedUserId: value });\n  }\n\n  clearUserInfo = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  shuffleTodos = (todos) => {\n    const shuffledTodos = [...todos];\n\n    for (let i = shuffledTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [shuffledTodos[i], shuffledTodos[j]]\n       = [shuffledTodos[j], shuffledTodos[i]];\n    }\n\n    this.setState(state => ({\n      ...state,\n      todos: shuffledTodos,\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            setSelectedUserId={this.setSelectedUserId}\n            todos={todos}\n            shuffleTodos={this.shuffleTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                clearUserInfo={this.clearUserInfo}\n                userId={selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}