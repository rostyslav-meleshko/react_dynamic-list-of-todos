{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","filter","isQueryInTodo","title","length","showTodos","serchElement","toLowerCase","trim","includes","hadnleChange","event","target","name","value","setState","filterTodos","todos","todo","completed","this","props","setUser","shuffleTodos","className","onSubmit","preventDefault","placeholder","onChange","type","onClick","map","key","id","readOnly","checked","userId","React","Component","request","endpoint","fetch","then","response","json","result","data","CurrentUser","currentUser","setCurrentUser","prevProps","a","allUsers","find","user","email","phone","clearUserInfo","App","selectedUserId","setValuesFromServer","stateName","shuffledTodos","i","j","Math","floor","random","allTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60d44d1f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    filter: 'All',\n  };\n\n  isQueryInTodo = (query, title) => {\n    if (!this.state.query.length && this.state.showTodos === 'All') {\n      return true;\n    }\n\n    if (title === null) {\n      return false;\n    }\n\n    const serchElement = query.toLowerCase().trim();\n\n    return (!!(title.toLowerCase().includes(serchElement)));\n  };\n\n  hadnleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      ...state,\n      [name]: value,\n    }));\n  }\n\n  filterTodos = (todos) => {\n    switch (this.state.filter) {\n      case 'Active':\n        return todos.filter(todo => !todo.completed);\n      case 'Completed':\n        return todos.filter(todo => todo.completed);\n      default: return todos;\n    }\n  }\n\n  render() {\n    const { todos, setUser, shuffleTodos } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <form onSubmit={event => event.preventDefault()}>\n            <input\n              name=\"query\"\n              placeholder=\"todos filter\"\n              className=\"todoInput\"\n              value={this.state.query}\n              onChange={this.hadnleChange}\n            />\n            <select\n              name=\"filter\"\n              value={this.state.filter}\n              onChange={this.hadnleChange}\n              className=\"todoSelect\"\n            >\n              <option value=\"All\">All</option>\n              <option value=\"Active\">Active</option>\n              <option value=\"Completed\">Completed</option>\n            </select>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => shuffleTodos(todos)}\n            >\n              Randomize\n            </button>\n          </form>\n          <ul className=\"TodoList__list\">\n            {this.filterTodos(todos).map(todo => (\n              this.isQueryInTodo(this.state.query, todo.title) && (\n                <li\n                  key={todo.id}\n                  className={todo.completed\n                    ? 'TodoList__item TodoList__item--checked'\n                    : 'TodoList__item TodoList__item--unchecked'}\n                >\n                  <label>\n                    <input type=\"checkbox\" readOnly checked={todo.completed} />\n                    <p>{todo.title}</p>\n                  </label>\n                  <button\n                    className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\"\n                    type=\"button\"\n                    onClick={() => setUser(+todo.userId, 'selectedUserId')}\n                  >\n                    User&nbsp;\n                    {todo.userId}\n                  </button>\n                </li>\n              )\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  setUser: PropTypes.func.isRequired,\n  shuffleTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (endpoint, id) => fetch(`${BASE_URL}/${endpoint}/`)\n  .then(response => response.json()).then(result => result.data);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { request } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = { currentUser: {} }\n\n  componentDidMount() {\n    this.setCurrentUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.setCurrentUser();\n    }\n  }\n\n  async setCurrentUser() {\n    const allUsers = await request('users/', this.props.userId);\n    const currentUser = allUsers.find(user => user.id === this.props.userId);\n\n    this.setState({ currentUser });\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.currentUser;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          className=\"TodoList__user-button button buttonLocation\"\n          onClick={() => {\n            this.props.clearUserInfo();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUserInfo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const allTodos = await request('todos');\n\n    this.setValuesFromServer(allTodos, 'todos');\n  }\n\n  setValuesFromServer = (value, stateName) => {\n    this.setState({ [stateName]: value });\n  }\n\n  clearUserInfo = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  shuffleTodos = (todos) => {\n    const shuffledTodos = [...todos];\n\n    for (let i = shuffledTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      // eslint-disable-next-line max-len\n      [shuffledTodos[i], shuffledTodos[j]]\n       = [shuffledTodos[j], shuffledTodos[i]];\n    }\n\n    this.setState(state => ({\n      ...state,\n      todos: shuffledTodos,\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            setUser={this.setValuesFromServer}\n            todos={todos}\n            shuffleTodos={this.shuffleTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                clearUserInfo={this.clearUserInfo}\n                userId={selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}